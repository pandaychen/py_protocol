// Code generated by protoc-gen-go.
// source: service_stream.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 定义发送请求信息
type SimpleRequest struct {
	// 定义发送的参数，采用驼峰命名方式，小写加下划线，如：student_name
	// 参数类型 参数名 标识号(不可重复)
	Data string `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *SimpleRequest) Reset()                    { *m = SimpleRequest{} }
func (m *SimpleRequest) String() string            { return proto1.CompactTextString(m) }
func (*SimpleRequest) ProtoMessage()               {}
func (*SimpleRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *SimpleRequest) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// 定义响应信息
type SimpleResponse struct {
	// 定义接收的参数
	// 参数类型 参数名 标识号(不可重复)
	Code  int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *SimpleResponse) Reset()                    { *m = SimpleResponse{} }
func (m *SimpleResponse) String() string            { return proto1.CompactTextString(m) }
func (*SimpleResponse) ProtoMessage()               {}
func (*SimpleResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *SimpleResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SimpleResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// 定义流式请求信息
type StreamRequest struct {
	// 流请求参数
	Question string `protobuf:"bytes,1,opt,name=question" json:"question,omitempty"`
}

func (m *StreamRequest) Reset()                    { *m = StreamRequest{} }
func (m *StreamRequest) String() string            { return proto1.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()               {}
func (*StreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *StreamRequest) GetQuestion() string {
	if m != nil {
		return m.Question
	}
	return ""
}

// 定义流式响应信息
type StreamResponse struct {
	// 流响应数据
	Answer string `protobuf:"bytes,1,opt,name=answer" json:"answer,omitempty"`
}

func (m *StreamResponse) Reset()                    { *m = StreamResponse{} }
func (m *StreamResponse) String() string            { return proto1.CompactTextString(m) }
func (*StreamResponse) ProtoMessage()               {}
func (*StreamResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *StreamResponse) GetAnswer() string {
	if m != nil {
		return m.Answer
	}
	return ""
}

func init() {
	proto1.RegisterType((*SimpleRequest)(nil), "proto.SimpleRequest")
	proto1.RegisterType((*SimpleResponse)(nil), "proto.SimpleResponse")
	proto1.RegisterType((*StreamRequest)(nil), "proto.StreamRequest")
	proto1.RegisterType((*StreamResponse)(nil), "proto.StreamResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Stream service

type StreamClient interface {
	Route(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	// 双向流式rpc，同时在请求参数前和响应参数前加上stream
	Conversations(ctx context.Context, opts ...grpc.CallOption) (Stream_ConversationsClient, error)
}

type streamClient struct {
	cc *grpc.ClientConn
}

func NewStreamClient(cc *grpc.ClientConn) StreamClient {
	return &streamClient{cc}
}

func (c *streamClient) Route(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := grpc.Invoke(ctx, "/proto.Stream/Route", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamClient) Conversations(ctx context.Context, opts ...grpc.CallOption) (Stream_ConversationsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Stream_serviceDesc.Streams[0], c.cc, "/proto.Stream/Conversations", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamConversationsClient{stream}
	return x, nil
}

type Stream_ConversationsClient interface {
	Send(*StreamRequest) error
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type streamConversationsClient struct {
	grpc.ClientStream
}

func (x *streamConversationsClient) Send(m *StreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamConversationsClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Stream service

type StreamServer interface {
	Route(context.Context, *SimpleRequest) (*SimpleResponse, error)
	// 双向流式rpc，同时在请求参数前和响应参数前加上stream
	Conversations(Stream_ConversationsServer) error
}

func RegisterStreamServer(s *grpc.Server, srv StreamServer) {
	s.RegisterService(&_Stream_serviceDesc, srv)
}

func _Stream_Route_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServer).Route(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Stream/Route",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServer).Route(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stream_Conversations_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServer).Conversations(&streamConversationsServer{stream})
}

type Stream_ConversationsServer interface {
	Send(*StreamResponse) error
	Recv() (*StreamRequest, error)
	grpc.ServerStream
}

type streamConversationsServer struct {
	grpc.ServerStream
}

func (x *streamConversationsServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamConversationsServer) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Stream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Stream",
	HandlerType: (*StreamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Route",
			Handler:    _Stream_Route_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Conversations",
			Handler:       _Stream_Conversations_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service_stream.proto",
}

func init() { proto1.RegisterFile("service_stream.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 227 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8f, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0x37, 0x62, 0x8a, 0x0e, 0x74, 0x0f, 0xa1, 0xca, 0xb2, 0x27, 0x89, 0x97, 0x82, 0xb0,
	0x88, 0x82, 0x07, 0x8f, 0xfa, 0x06, 0xd9, 0x07, 0x90, 0xb8, 0x3b, 0x87, 0xc2, 0x36, 0xa9, 0x99,
	0xb4, 0xbe, 0x80, 0x0f, 0x2e, 0x9d, 0xa4, 0xd6, 0xee, 0x29, 0xff, 0x9f, 0x7c, 0x7f, 0xfe, 0x19,
	0xa8, 0x08, 0xc3, 0xd0, 0x1c, 0xf0, 0x83, 0x62, 0x40, 0xdb, 0xee, 0xba, 0xe0, 0xa3, 0x57, 0x92,
	0x0f, 0x7d, 0x0f, 0xe5, 0xbe, 0x69, 0xbb, 0x13, 0x1a, 0xfc, 0xea, 0x91, 0xa2, 0x52, 0x70, 0x79,
	0xb4, 0xd1, 0x6e, 0xc4, 0x9d, 0xa8, 0xaf, 0x0d, 0x6b, 0xfd, 0x0a, 0xeb, 0x09, 0xa2, 0xce, 0x3b,
	0xc2, 0x91, 0x3a, 0xf8, 0x23, 0x32, 0x25, 0x0d, 0x6b, 0x55, 0x81, 0x1c, 0xec, 0xa9, 0xc7, 0xcd,
	0x05, 0x47, 0x93, 0xd1, 0x0f, 0x50, 0xee, 0xb9, 0x77, 0x2a, 0xd8, 0xc2, 0x15, 0x8b, 0xc6, 0xbb,
	0x5c, 0xf2, 0xe7, 0x75, 0x0d, 0xeb, 0x09, 0xce, 0x45, 0xb7, 0x50, 0x58, 0x47, 0xdf, 0x18, 0x32,
	0x9b, 0xdd, 0xd3, 0x8f, 0x80, 0x22, 0xa1, 0xea, 0x05, 0xa4, 0xf1, 0x7d, 0x44, 0x55, 0xa5, 0xd5,
	0x76, 0x8b, 0x85, 0xb6, 0x37, 0x67, 0xb7, 0xe9, 0x63, 0xbd, 0x52, 0x6f, 0x50, 0xbe, 0x7b, 0x37,
	0x60, 0x20, 0x3b, 0x96, 0xd3, 0x9c, 0xff, 0x3f, 0xef, 0x9c, 0x5f, 0x0c, 0xa6, 0x57, 0xb5, 0x78,
	0x14, 0x9f, 0x05, 0xbf, 0x3d, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x9e, 0xdb, 0xc5, 0xf4, 0x64,
	0x01, 0x00, 0x00,
}
